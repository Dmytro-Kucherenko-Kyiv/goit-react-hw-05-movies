{"version":3,"file":"static/js/387.3ea2a39a.chunk.js","mappings":"8QAEaA,EAAWC,EAAAA,GAAAA,GAAH,6OAcRC,EAAWD,EAAAA,GAAAA,EAAH,sJ,GASOA,EAAAA,GAAAA,IAAH,sM,QC+CzB,EAnEa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,mCAAG,oGAElBF,GAAa,GAFK,SAGAG,EAAAA,GAAiBT,GAHjB,OAGZU,EAHY,OAIlBN,EAAQM,EAAIP,MAJM,gDAMlBQ,QAAQC,IAAR,MANkB,yBAQlBN,GAAa,GARK,4EAAH,qDAWnBE,GACD,GAAE,CAACR,KAGF,8BACGK,GACC,uBAAG,iBAEH,8BACGF,EAAKU,QACJ,SAAChB,EAAD,UACGM,EAAKW,KAAI,SAAAC,GAAK,OACb,0BACGA,EAAMC,cACL,gBACEC,IAAG,0CAAqCF,EAAMC,cAC9CE,IAAG,UAAKH,EAAMI,KAAX,WACHC,MAAM,SAGR,gBACEH,IAAG,oDACHC,IAAG,UAAKH,EAAMI,KAAX,cAGNJ,EAAMI,MACL,SAACpB,EAAD,UAAWgB,EAAMI,QAEjB,SAACpB,EAAD,UAAU,kBAEXgB,EAAMM,WACL,+BACE,UAACtB,EAAD,YACE,0BAAM,gBAAkB,IAAEgB,EAAMM,gBAIpC,SAACtB,EAAD,UAAU,qCAzBLgB,EAAMO,GADF,OAgCjB,SAACvB,EAAD,UAAU,iCAMrB,C,+LCpEKwB,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAHiB,+BAIV,IAAMC,EAAiB,mCAAG,oGACbD,EAAAA,EAAAA,IAAA,sCAAyCD,IAD5B,cACzBb,EADyB,yBAExBA,EAAIgB,MAFoB,2CAAH,qDAKjBC,EAAY,mCAAG,WAAML,GAAN,uFACRE,EAAAA,EAAAA,IAAA,iBAAoBF,EAApB,oBAAkCC,IAD1B,cACpBb,EADoB,yBAEnBA,EAAIgB,MAFe,2CAAH,sDAKZE,EAAY,mCAAG,WAAMN,GAAN,uFACRE,EAAAA,EAAAA,IAAA,iBAAoBF,EAApB,4BAA0CC,IADlC,cACpBb,EADoB,yBAEnBA,EAAIgB,MAFe,2CAAH,sDAKZG,EAAe,mCAAG,WAAMP,GAAN,uFACXE,EAAAA,EAAAA,IAAA,iBAAoBF,EAApB,4BAA0CC,IAD/B,cACvBb,EADuB,yBAEtBA,EAAIgB,MAFkB,2CAAH,sDAKfI,EAAc,mCAAG,WAAMX,GAAN,uFACVK,EAAAA,EAAAA,IAAA,gCAAmCD,EAAnC,kBAAoDJ,IAD1C,cACtBT,EADsB,yBAErBA,EAAIgB,MAFiB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin: 0.1rem 0;\n\n  > li {\n    /* display: flex; */\n    font-size: small;\n    /* background-color: rgba(0, 0, 0, 0.05); */\n    padding: 0.5rem;\n  }\n`;\n\nexport const CastText = styled.p`\n  margin: 0.3rem 0;\n  width: 100px;\n  > span {\n    display: block;\n    font-weight: 700;\n    margin-right: 0.2rem;\n  }\n`;\nexport const MovieAddInfo = styled.div`\n  padding: 1rem 0.2rem;\n  border-bottom: 0.2rem solid rgba(0, 0, 0, 0.3);\n  border-top: 0.2rem solid rgba(0, 0, 0, 0.3);\n  > ul > li {\n    margin: 0 0 0.5rem 1rem;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../../services/api';\nimport { CastList, CastText } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const findMovieCast = async () => {\n      try {\n        setIsLoading(true);\n        const res = await API.getMovieCast(movieId);\n        setCast(res.cast);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    findMovieCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading ? (\n        <p>Loading ...</p>\n      ) : (\n        <>\n          {cast.length ? (\n            <CastList>\n              {cast.map(actor => (\n                <li key={actor.id}>\n                  {actor.profile_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n                      alt={`${actor.name} poster`}\n                      width=\"100\"\n                    />\n                  ) : (\n                    <img\n                      src={`https://via.placeholder.com/100x150?text=No+Image`}\n                      alt={`${actor.name} profile`}\n                    />\n                  )}\n                  {actor.name ? (\n                    <CastText>{actor.name}</CastText>\n                  ) : (\n                    <CastText>No actor name</CastText>\n                  )}\n                  {actor.character ? (\n                    <>\n                      <CastText>\n                        <span>Character: </span> {actor.character}\n                      </CastText>\n                    </>\n                  ) : (\n                    <CastText>No information about character</CastText>\n                  )}\n                </li>\n              ))}\n            </CastList>\n          ) : (\n            <CastText>No information about cast</CastText>\n          )}\n        </>\n      )}\n    </>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c454af6a020661d12a6dad4eda62cbe8';\n\naxios.defaults.baseURL = BASE_URL;\nexport const getTrendingMovies = async () => {\n  const res = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const getMovieById = async id => {\n  const res = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const getMovieCast = async id => {\n  const res = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const getMovieReviews = async id => {\n  const res = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}`);\n  return res.data;\n};\n\nexport const getMovieByName = async name => {\n  const res = await axios.get(`/search/movie?api_key=${API_KEY}&query=${name}`);\n  return res.data;\n};\n"],"names":["CastList","styled","CastText","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","findMovieCast","API","res","console","log","length","map","actor","profile_path","src","alt","name","width","character","id","API_KEY","axios","getTrendingMovies","data","getMovieById","getMovieCast","getMovieReviews","getMovieByName"],"sourceRoot":""}